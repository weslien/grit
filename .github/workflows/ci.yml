name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'

jobs:
  # Lint and format checks
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

    - name: Check Go formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          echo "Please run 'gofmt -s -w .'"
          exit 1
        fi

    - name: Check Go imports
      run: |
        go install golang.org/x/tools/cmd/goimports@latest
        if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
          echo "The following files have incorrect imports:"
          goimports -l .
          echo "Please run 'goimports -w .'"
          exit 1
        fi

  # Tests across multiple Go versions
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22', '1.23']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Check test coverage
      run: |
        go tool cover -func=coverage.out
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Total coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 60" | bc -l) )); then
          echo "Coverage is below 60%"
          exit 1
        fi

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # Build verification across platforms
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        BINARY_NAME=grit
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME=grit.exe
        fi
        go build -v -o dist/${BINARY_NAME}-${{ matrix.goos }}-${{ matrix.goarch }} ./main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: grit-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  # Integration tests with actual CLI commands
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build grit
      run: go build -o grit main.go

    - name: Test CLI commands
      run: |
        # Test help command
        ./grit --help
        
        # Test version command  
        ./grit --version
        
        # Test completion generation
        ./grit completion bash > /dev/null
        ./grit completion zsh > /dev/null
        ./grit completion fish > /dev/null
        
        # Test example output
        ./grit example-output

    - name: Create test workspace
      run: |
        mkdir -p test-workspace/packages/app/example
        mkdir -p test-workspace/packages/lib/common
        
        # Create root grit.yaml
        cat > test-workspace/grit.yaml << 'EOF'
        repo:
          name: test-workspace
          owner: test
        
        types:
          app:
            package_dir: packages/app
            targets:
              build: "echo 'Building app'"
              test: "echo 'Testing app'"
          lib:
            package_dir: packages/lib  
            targets:
              build: "echo 'Building lib'"
              test: "echo 'Testing lib'"
        EOF
        
        # Create app package
        cat > test-workspace/packages/app/example/grit.yaml << 'EOF'
        package:
          name: example-app
          version: "1.0.0"
          dependencies: ["common-lib"]
        EOF
        
        # Create lib package
        cat > test-workspace/packages/lib/common/grit.yaml << 'EOF'
        package:
          name: common-lib
          version: "1.0.0"
          dependencies: []
        EOF

    - name: Test workspace commands
      run: |
        cd test-workspace
        
        # Test graph command
        ../grit graph
        ../grit graph --format dot > /dev/null
        
        # Test analyze command
        ../grit analyze
        ../grit analyze --json > /dev/null
        
        # Test dirty command
        ../grit dirty

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Check for ineffective assignments
      run: |
        go install github.com/gordonklaus/ineffassign@latest
        ineffassign ./...

    - name: Check for unused code
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...

    - name: Check for misspellings
      run: |
        go install github.com/client9/misspell/cmd/misspell@latest
        misspell -error .

    - name: Verify go.mod is tidy
      run: |
        go mod tidy
        if ! git diff --quiet; then
          echo "go.mod is not tidy"
          git diff
          exit 1
        fi

  # Dependency and license checks
  dependencies:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Check for known vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Generate dependency report
      run: |
        echo "# Dependency Report" > dependency-report.md
        echo "Generated on: $(date)" >> dependency-report.md
        echo "" >> dependency-report.md
        echo "## Direct Dependencies" >> dependency-report.md
        go list -m -f '{{.Path}} {{.Version}}' all | grep -v "$(go list -m)" >> dependency-report.md

    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: dependency-report.md